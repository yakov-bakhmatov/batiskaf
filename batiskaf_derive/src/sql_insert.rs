use proc_macro2::TokenStream;
use quote::quote;
use syn::DeriveInput;

use crate::column::{columns, Column};

pub(crate) fn derive(input: DeriveInput) -> TokenStream {
    let name = input.ident;
    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();
    let cs = columns(&input.data);
    let cs: Vec<Column> = cs
        .into_iter()
        .filter(|c| !c.skip())
        .filter(|c| !c.autogenerated())
        .collect();
    let names: Vec<String> = cs.into_iter().map(|c| c.name()).collect();
    let params: Vec<String> = names.iter().map(|c| format!(":{}", c)).collect();
    let sql = format!(
        "INSERT INTO {{}} ({}) VALUES ({})",
        names.join(", "),
        params.join(", ")
    );
    quote! {
        impl #impl_generics ::batiskaf::SqlInsert for #name #ty_generics #where_clause {
            fn insert_statement(table: &str) -> String {
                format!(#sql, table)
            }
        }
    }
}
